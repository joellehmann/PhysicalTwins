// Autoprovisioning of Digital Twins ###################################
// Masterthesis ########################################################
// by Joel Lehmann #####################################################

#include <Wire.h>
#include <SoftwareSerial.h> 
#include <LiquidCrystal_I2C.h> 
#include "BlueDot_BME280.h"
#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>
#include "dtprovision.h"
#include "noderedprovision.h"
#include "..\..\Credentials\credentials.h"

#define RX_PIN D7                                          
#define TX_PIN D6 
#define defHonoTenant "HSMA"
#define defHonoNamespace "HSMA"
#define defHonoDevice "smartDTsensorbl"
#define defHonoDevicePassword "sehrgeheim"
#define defServerIP "http://twinserver.kve.hs-mannheim.de"
#define defTelemetryPort 18443
#define defDevRegPort "28443"
#define defDittoPort "38443"
#define defProvDelay 1000
#define defDevOpsUser "devops"
#define defDevOpsPwd "foo"
#define defDittoUser "ditto"
#define defDittoPwd "ditto"
#define defCaseColor "black"
#define defDisplayColor "blue"
#define Version "2.0.2"
#define Date "15.07.2021"

String serverName;
int httpResponseCode;
unsigned long lastTime = 0;
unsigned long timerDelay = 5000;
int httpResponse;
int httpResonse;
const String honoTenant = defHonoTenant;
const String honoNamespace = defHonoNamespace;
const String honoDevice = defHonoDevice;
int counter = 4990;


const size_t lenJsonString = 10000;
char jsonString[lenJsonString];
const char* chonoTenant = defHonoTenant;
const char* chonoNamespace = defHonoNamespace;
const char* chonoDevice = defHonoDevice;

DigitalTwin DigitalTwinInstance;
NodeRed NodeRedInstance;

const char* SSID = WLANSSID;
const char* PSK = WLANPSK;
const char* MQTT_BROKER = "141.19.44.65";
String tmpMqttUser = honoDevice + "@" + honoTenant;
const char* mqttUser = tmpMqttUser.c_str();
const char* mqttPassword = defHonoDevicePassword;
const char* clientId = defHonoDevice;
char wiFiHostname[ ] = defHonoDevice;
int ppm;
int ppmint;
int i = 0;
int Mtemp, Mhum, Mpress, RAWppm;
char antwort[9];
bool noWifi = false;
int cntWifi;

WiFiClient espClient;
PubSubClient client(espClient);
LiquidCrystal_I2C lcd(0x27, 20, 4);
BlueDot_BME280 bme280 = BlueDot_BME280();
SoftwareSerial co2Serial(D7, D6); // RX, TX

//######################################################################
// Build publish String ################################################
//######################################################################

void buildPubString (char * property, int value )
{
  memset(jsonString, NULL, sizeof jsonString);
  char tmp[32];

  strcpy(jsonString,"{  \"topic\": \"");
  strcat(jsonString,chonoNamespace);
  strcat(jsonString,"/");
  strcat(jsonString,chonoDevice);
  strcat(jsonString,"/things/twin/commands/modify\",  \"headers\": {},  \"path\": \"/features/telemetry/properties/");
  strcat(jsonString,property);
  strcat(jsonString,"/value\",  \"value\": ");
  strcat(jsonString,itoa(value,tmp,10));
  strcat(jsonString,"}");
}

void buildPubStringString (char * property, char * value )
{
  memset(jsonString, NULL, sizeof jsonString);
  char tmp[32];

  strcpy(jsonString,"{  \"topic\": \"");
  strcat(jsonString,chonoNamespace);
  strcat(jsonString,"/");
  strcat(jsonString,chonoDevice);
  strcat(jsonString,"/things/twin/commands/modify\",  \"headers\": {},  \"path\": \"/features/telemetry/properties/");
  strcat(jsonString,property);
  strcat(jsonString,"/value\",  \"value\": ");
  strcat(jsonString,value);
  strcat(jsonString,"}");
}

//######################################################################
// MQTT CALLBACK #######################################################
//######################################################################

void callback(char* topic, byte* payload, unsigned int length) {
 
  //Serial.print("Message arrived in topic: ");
  //Serial.println(topic);
 
  //Serial.print("Message:");
  //for (int i = 0; i < length; i++) {
  //  Serial.print((char)payload[i]);
  //}
  // hier strcmp verwenden!!!
  if (String(topic) == "command///req//backlightOn") {
    lcd.backlight();
    Serial.println("-----------------------");
    Serial.println("COMMAND FROM DIGITAL TWIN: BACKLIGHT ON");
    buildPubString("DisplayBacklight", 1);
    client.publish("telemetry", jsonString,false);
  }
  if (String(topic) == "command///req//backlightOff") {
    lcd.noBacklight();
    Serial.println("-----------------------");
    Serial.println("COMMAND FROM DIGITAL TWIN: BACKLIGHT OFF");
    buildPubString("DisplayBacklight", 0);
    client.publish("telemetry", jsonString,false);
  }
  if (String(topic) == "command///req//espRestart") {
    Serial.println("-----------------------");
    Serial.println("COMMAND FROM DIGITAL TWIN: Restarting Device in 3 sec.");
    Serial.println("-----------------------");
    delay(3000);
    ESP.restart();
  }

  Serial.println("-----------------------");
 
}

//######################################################################
// READ CO2 ############################################################
//######################################################################

int leseCO2()
{
  byte cmd[9] = {0xFF, 0x01, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79};
  co2Serial.write(cmd, 9);
  co2Serial.readBytes(antwort, 9);

  int antwortHigh = (int) antwort[2];
  int antwortLow = (int) antwort[3];
  ppmint = (256 * antwortHigh) + antwortLow;
    
  if (antwort[0] != 0xFF || antwort[1] != 0x86 || ppmint < 200 || ppmint > 4000 || Mtemp > 80 || Mhum < 1 || Mpress < 800) {
    i++;
    ppmint = 0;
    if (i>10) {  
      //co2Serial.end();
      //delay(500);
      //co2Serial.begin(9600);
      ESP.restart();
    }    
    return ppmint;   
  } else {
    i = 0;
  }
  return ppmint;
}

//######################################################################
// SETUP WiFi ##########################################################
//######################################################################

void setup_wifi() {
    Serial.println();
    Serial.print("Connecting to ");
    Serial.println(SSID);
    wifi_station_set_hostname(wiFiHostname);
    WiFi.begin(SSID, PSK);
    while (WiFi.status() != WL_CONNECTED && cntWifi < 40) {
        delay(500);
        Serial.print(".");
        cntWifi++;
        noWifi = false;
    }
    
    if (cntWifi > 35){
      noWifi = true;
      Serial.println("NO WIFI");
    }
    
    Serial.println("");
    Serial.println("WiFi connected");
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP());
}

//######################################################################
// SETUP ###############################################################
//######################################################################

void setup() {
  
  lcd.init(); 
  lcd.backlight();
  lcd.clear();
  lcd.setCursor(0,0);
  
  lcd.print("KVE HS-Mannheim");
  lcd.setCursor(0,1);
  lcd.print("Version:");
  lcd.setCursor(15,1);
  lcd.print(Version);
  lcd.setCursor(0,2);
  lcd.print("Datum:");
  lcd.setCursor(10,2);
  lcd.print(Date);
  lcd.setCursor(0,3);
  lcd.print("by    Joel   Lehmann");
  
  Serial.begin(9600);
  co2Serial.begin(9600);
     
  bme280.parameter.communication = 0;                  //Choose communication protocol
  bme280.parameter.I2CAddress = 0x76;                  //Choose I2C Address
  bme280.parameter.sensorMode = 0b11;                  //Choose sensor mode
  bme280.parameter.IIRfilter = 0b100;                  //Setup for IIR Filter
  bme280.parameter.humidOversampling = 0b101;          //Setup Humidity Oversampling
  bme280.parameter.tempOversampling = 0b101;           //Setup Temperature Ovesampling
  bme280.parameter.pressOversampling = 0b101;          //Setup Pressure Oversampling 
  bme280.parameter.pressureSeaLevel = 1013.25;         //default value of 1013.25 hPa
  bme280.parameter.tempOutsideCelsius = 15;            //default value of 15Â°C
  bme280.init();
  setup_wifi();
  client.setServer(MQTT_BROKER, 8883);
  client.setCallback(callback);
  client.subscribe("command/+/+/req/#");

  lcd.clear();
  if ( noWifi == true ) {
    lcd.setCursor(0,0);
    lcd.print("smartDTsensor noWiFi");
  } else {
    lcd.setCursor(0,0);
    lcd.print("smartDTsensor  by JL");
  }
  lcd.backlight();
      
  lcd.setCursor(0,2);
  lcd.print("Temp:");
  lcd.setCursor(0,3);
  lcd.print("rF:");
  lcd.setCursor(0,1);
  lcd.print("CO2:");

  lcd.setCursor(19,2);
  lcd.print("C");
  
  lcd.setCursor(19,3);
  lcd.print("%");
  lcd.setCursor(17,1);
  lcd.print("ppm");

  //######################################################################
  // DTI INIT ############################################################
  //######################################################################

  DigitalTwinInstance.init(espClient, defServerIP, defDevRegPort, defDittoPort, defProvDelay);

  //######################################################################
  // HTTP POST CREATE TENANT #############################################
  //######################################################################

  httpResponse = DigitalTwinInstance.createHonoTenant(chonoTenant);

  lcd.clear();
  lcd.setCursor(0,1);
  lcd.print("HONO TENANT PROV");
  lcd.setCursor(0,3);
  lcd.print("HTTP RESPONSE:");
  lcd.setCursor(16,3);
  lcd.print(httpResponse);

  //######################################################################
  // HTTP POST CREATE DEVICE #############################################
  //######################################################################

  httpResponse = DigitalTwinInstance.createHonoDevice(defHonoNamespace, defHonoDevice);

  lcd.clear();
  lcd.setCursor(0,1);
  lcd.print("HONO DEVICE PROV");
  lcd.setCursor(0,3);
  lcd.print("HTTP RESPONSE:");
  lcd.setCursor(16,3);
  lcd.print(httpResponse);

  //######################################################################
  // HTTP PUT CREDENTIALS ################################################
  //######################################################################

  httpResponse = DigitalTwinInstance.createHonoCredentials(defHonoDevicePassword);

  lcd.clear();
  lcd.setCursor(0,1);
  lcd.print("HONO CREDENTIALS PROV");
  lcd.setCursor(0,3);
  lcd.print("HTTP RESPONSE:");
  lcd.setCursor(16,3);
  lcd.print(httpResponse);

  //######################################################################
  // HTTP POST DITTO PIGGYBACK ###########################################
  //######################################################################
  
  //String dittoPiggyback = "{\"targetActorSelection\":\"/system/sharding/connection\",\"headers\":{\"aggregate\":false},\"piggybackCommand\":{\"type\":\"connectivity.commands:createConnection\",\"connection\":{\"id\":\"hono-connection-for-"+ honoTenant +"\",\"connectionType\":\"amqp-10\",\"connectionStatus\":\"open\",\"uri\":\"amqp://consumer%40HONO:verysecret@c2e-dispatch-router-ext:15672\",\"failoverEnabled\":true,\"sources\":[{\"addresses\":[\"telemetry/"+ honoTenant +"\",\"event/"+ honoTenant +"\"],\"authorizationContext\":[\"pre-authenticated:hono-connection\"],\"enforcement\":{\"input\":\"{{header:device_id}}\",\"filters\":[\"{{entity:id}}\"]},\"headerMapping\":{\"hono-device-id\":\"{{header:device_id}}\",\"content-type\":\"{{header:content-type}}\"},\"replyTarget\":{\"enabled\":true,\"address\":\"{{header:reply-to}}\",\"headerMapping\":{\"to\":\"command/"+ honoTenant +"/{{header:hono-device-id}}\",\"subject\":\"{{header:subject|fn:default(topic:action-subject)|fn:default(topic:criterion)}}-response\",\"correlation-id\":\"{{header:correlation-id}}\",\"content-type\":\"{{header:content-type|fn:default(\'application/vnd.eclipse.ditto+json\')}}\"},\"expectedResponseTypes\":[\"response\",\"error\"]},\"acknowledgementRequests\":{\"includes\":[],\"filter\":\"fn:filter(header:qos,\'ne\',\'0\')\"}},{\"addresses\":[\"command_response/"+ honoTenant +"/replies\"],\"authorizationContext\":[\"pre-authenticated:hono-connection\"],\"headerMapping\":{\"content-type\":\"{{header:content-type}}\",\"correlation-id\":\"{{header:correlation-id}}\",\"status\":\"{{header:status}}\"},\"replyTarget\":{\"enabled\":false,\"expectedResponseTypes\":[\"response\",\"error\"]}}],\"targets\":[{\"address\":\"command/"+ honoTenant +"\",\"authorizationContext\":[\"pre-authenticated:hono-connection\"],\"topics\":[\"_/_/things/live/commands\",\"_/_/things/live/messages\"],\"headerMapping\":{\"to\":\"command/"+ honoTenant +"/{{thing:id}}\",\"subject\":\"{{header:subject|fn:default(topic:action-subject)}}\",\"content-type\":\"{{header:content-type|fn:default(\'application/vnd.eclipse.ditto+json\')}}\",\"correlation-id\":\"{{header:correlation-id}}\",\"reply-to\":\"{{fn:default(\'command_response/"+ honoTenant +"/replies\')|fn:filter(header:response-required,\'ne\',\'false\')}}\"}},{\"address\":\"command/"+ honoTenant +"\",\"authorizationContext\":[\"pre-authenticated:hono-connection\"],\"topics\":[\"_/_/things/twin/events\",\"_/_/things/live/events\"],\"headerMapping\":{\"to\":\"command/"+ honoTenant +"/{{thing:id}}\",\"subject\":\"{{header:subject|fn:default(topic:action-subject)}}\",\"content-type\":\"{{header:content-type|fn:default(\'application/vnd.eclipse.ditto+json\')}}\",\"correlation-id\":\"{{header:correlation-id}}\"}}]}}}";

  strcpy(jsonString,"{\"targetActorSelection\":\"/system/sharding/connection\",\"headers\":{\"aggregate\":false},\"piggybackCommand\":{\"type\":\"connectivity.commands:createConnection\",\"connection\":{\"id\":\"hono-connection-for-");
  strcat(jsonString,chonoTenant);
  strcat(jsonString,"\",\"connectionType\":\"amqp-10\",\"connectionStatus\":\"open\",\"uri\":\"amqp://consumer%40HONO:verysecret@c2e-dispatch-router-ext:15672\",\"failoverEnabled\":true,\"sources\":[{\"addresses\":[\"telemetry/");
  strcat(jsonString,chonoTenant);
  strcat(jsonString,"\",\"event/");
  strcat(jsonString,chonoTenant);
  strcat(jsonString,"\"],\"authorizationContext\":[\"pre-authenticated:hono-connection\"],\"enforcement\":{\"input\":\"{{header:device_id}}\",\"filters\":[\"{{entity:id}}\"]},\"headerMapping\":{\"hono-device-id\":\"{{header:device_id}}\",\"content-type\":\"{{header:content-type}}\"},\"replyTarget\":{\"enabled\":true,\"address\":\"{{header:reply-to}}\",\"headerMapping\":{\"to\":\"command/");
  strcat(jsonString,chonoTenant);
  strcat(jsonString,"/{{header:hono-device-id}}\",\"subject\":\"{{header:subject|fn:default(topic:action-subject)|fn:default(topic:criterion)}}-response\",\"correlation-id\":\"{{header:correlation-id}}\",\"content-type\":\"{{header:content-type|fn:default(\'application/vnd.eclipse.ditto+json\')}}\"},\"expectedResponseTypes\":[\"response\",\"error\"]},\"acknowledgementRequests\":{\"includes\":[],\"filter\":\"fn:filter(header:qos,\'ne\',\'0\')\"}},{\"addresses\":[\"command_response/");
  strcat(jsonString,chonoTenant);
  strcat(jsonString,"/replies\"],\"authorizationContext\":[\"pre-authenticated:hono-connection\"],\"headerMapping\":{\"content-type\":\"{{header:content-type}}\",\"correlation-id\":\"{{header:correlation-id}}\",\"status\":\"{{header:status}}\"},\"replyTarget\":{\"enabled\":false,\"expectedResponseTypes\":[\"response\",\"error\"]}}],\"targets\":[{\"address\":\"command/");
  strcat(jsonString,chonoTenant);
  strcat(jsonString,"\",\"authorizationContext\":[\"pre-authenticated:hono-connection\"],\"topics\":[\"_/_/things/live/commands\",\"_/_/things/live/messages\"],\"headerMapping\":{\"to\":\"command/");
  strcat(jsonString,chonoTenant);
  strcat(jsonString, "/{{thing:id}}\",\"subject\":\"{{header:subject|fn:default(topic:action-subject)}}\",\"content-type\":\"{{header:content-type|fn:default(\'application/vnd.eclipse.ditto+json\')}}\",\"correlation-id\":\"{{header:correlation-id}}\",\"reply-to\":\"{{fn:default(\'command_response/");
  strcat(jsonString,chonoTenant);
  strcat(jsonString,"/replies\')|fn:filter(header:response-required,\'ne\',\'false\')}}\"}},{\"address\":\"command/");
  strcat(jsonString,chonoTenant);
  strcat(jsonString,"\",\"authorizationContext\":[\"pre-authenticated:hono-connection\"],\"topics\":[\"_/_/things/twin/events\",\"_/_/things/live/events\"],\"headerMapping\":{\"to\":\"command/");
  strcat(jsonString,chonoTenant);
  strcat(jsonString,"/{{thing:id}}\",\"subject\":\"{{header:subject|fn:default(topic:action-subject)}}\",\"content-type\":\"{{header:content-type|fn:default(\'application/vnd.eclipse.ditto+json\')}}\",\"correlation-id\":\"{{header:correlation-id}}\"}}]}}}");
  
  httpResponse = DigitalTwinInstance.createDittoPiggyback(defDevOpsUser, defDevOpsPwd, jsonString);
  
  lcd.clear();
  lcd.setCursor(0,1);
  lcd.print("DITTO PIGGYBACK PROV");
  lcd.setCursor(0,3);
  lcd.print("HTTP RESPONSE:");
  lcd.setCursor(16,3);
  lcd.print(httpResponse);

  memset(jsonString, NULL, sizeof jsonString);

  //######################################################################
  // HTTP CREATE DITTO POLICY ############################################
  //######################################################################

  strcpy(jsonString, R"=====(
    {
      "entries": {
        "DEFAULT": {
          "subjects": {
            "{{ request:subjectId }}": {
              "type": "Ditto user authenticated via nginx"
            }
          },
          "resources": {
            "thing:/": {
              "grant": ["READ", "WRITE"],
              "revoke": []
            },
            "policy:/": {
              "grant": ["READ", "WRITE"],
              "revoke": []
            },
            "message:/": {
              "grant": ["READ", "WRITE"],
              "revoke": []
            }
          }
        },
        "HONO": {
          "subjects": {
            "pre-authenticated:hono-connection": {
              "type": "Connection to Eclipse Hono"
            }
          },
          "resources": {
            "thing:/": {
              "grant": ["READ", "WRITE"],
              "revoke": []
            },
            "message:/": {
              "grant": ["READ", "WRITE"],
              "revoke": []
            }
          }
        }
      }
    }
  )=====");

  httpResponse = DigitalTwinInstance.createDittoPolicy(defDittoUser, defDittoPwd, jsonString);

  lcd.clear();
  lcd.setCursor(0,1);
  lcd.print("DITTO POLICY PROV");
  lcd.setCursor(0,3);
  lcd.print("HTTP RESPONSE:");
  lcd.setCursor(16,3);
  lcd.print(httpResponse);
  
  memset(jsonString, NULL, sizeof jsonString);

  //######################################################################
  // HTTP CREATE DITTO THING #############################################
  //######################################################################
  
  strcpy(jsonString, R"=====(
    {
      "policyId": ")====="); 
  strcat(jsonString,chonoNamespace);
  strcat(jsonString,":");
  strcat(jsonString,chonoDevice);
  strcat(jsonString,R"=====(",
      "attributes": {
        "devicetype": "Indoor Air Quality Measurement",
        "deviceColor": ")=====");
  strcat(jsonString,defCaseColor); 
  strcat(jsonString,R"=====(",
        "location": "Mannheim",
        "institute": "KVE",
        "building": "P",
        "room": "007"
      },
      "features": {
      }
    }
  )=====");

  httpResponse = DigitalTwinInstance.createDittoThing(jsonString);

  lcd.clear();
  lcd.setCursor(0,1);
  lcd.print("DITTO Thing PROV");
  lcd.setCursor(0,3);
  lcd.print("HTTP RESPONSE:");
  lcd.setCursor(16,3);
  lcd.print(httpResponse);

  memset(jsonString, NULL, sizeof jsonString);
  
  //######################################################################
  // HTTP CREATE DITTO THING FEATURES ####################################
  //######################################################################

  strcpy(jsonString, R"=====(
    {
      "telemetry": {
        "properties": {
          "DisplayBacklight": {
            "value": 0,
            "color": ")=====");
  strcat(jsonString,defDisplayColor);
  strcat(jsonString,R"=====("
          },
          "Temperature": {
            "value": 0,
            "unit": "Â°C"
          },
          "Humidity": {
            "value": 0,
            "unit": "%"
          },
          "Pressure": {
            "value": 0,
            "unit": "hPa"
          },
          "CO2": {
            "value": 0,
            "unit": "ppm"
          }       
        }
      }
    }
  )=====");

  httpResponse = DigitalTwinInstance.createDittoFeatures(jsonString);

  lcd.clear();
  lcd.setCursor(0,1);
  lcd.print("DITTO Feature PROV");
  lcd.setCursor(0,3);
  lcd.print("HTTP RESPONSE:");
  lcd.setCursor(16,3);
  lcd.print(httpResponse);

  memset(jsonString, NULL, sizeof jsonString);

  //######################################################################
  // HTTP CREATE NODERED DASHBOARD #######################################
  //######################################################################
/*
  lcd.clear();
  lcd.setCursor(0,1);
  lcd.print("NR Dashboard PROV");
  lcd.setCursor(0,3);
  //lcd.print("HTTP RESPONSE:");
  //lcd.setCursor(16,3);
  //lcd.print(httpResponse);

  NodeRedInstance.init(espClient, "http://twinserver.kve.hs-mannheim.de:18443", honoNamespace + ":" + honoDevice, "10");

  String dittoAddress = "http://ditto:ditto@twinserver.kve.hs-mannheim.de:38443/api/2/things/"+honoNamespace+":"+honoDevice+"/features/telemetry/properties/";

  NodeRedInstance.addText(dittoAddress + "DisplayBacklight/value", "Display Backlight");

  NodeRedInstance.addGauge(dittoAddress + "Temperature/value", "TEMP", "Â°C", 50, 5, 1);
  NodeRedInstance.addGauge(dittoAddress + "Humidity/value", "HUM", "%", 100, 0, 1);
  NodeRedInstance.addGauge(dittoAddress + "Pressure/value", "PRESS", "hPa", 1050, 950, 1);
  NodeRedInstance.addGauge(dittoAddress + "CO2/value", "CO2", "ppm", 2000, 400, 15);

  //NodeRedInstance.addChart(dittoAddress + "Temp/value", "TEMP", 50, 5, 1, 10);
  //NodeRedInstance.addChart(dittoAddress + "Hum/value", "HUM", 100, 0, 1, 10);
  //NodeRedInstance.addChart(dittoAddress + "Press/value", "PRESS", 1050, 950, 1, 10);
  NodeRedInstance.addChart(dittoAddress + "CO2/value", "CO2", 2000, 400, 15, 10);

  String dittoCommandAddress = "http://ditto:ditto@twinserver.kve.hs-mannheim.de:38443/api/2/things/"+honoNamespace+":"+honoDevice+"/inbox/messages/";

  NodeRedInstance.addSwitch(dittoCommandAddress + "backlightOff?timeout=0", dittoCommandAddress + "backlightOn?timeout=0", "Display Backlight");

  NodeRedInstance.addButton(dittoCommandAddress + "espRestart?timeout=0", "Reboot Device");
  
  NodeRedInstance.createNodeRedDashboard();

  */

  //######################################################################
  // LCD ADJUSTMENTS #####################################################
  //######################################################################
  
  lcd.clear();
  lcd.setCursor(0,1);
  lcd.print("DITTO Thing PROV");
  lcd.setCursor(0,3);
  lcd.print("HTTP RESPONSE:");
  lcd.setCursor(16,3);
  lcd.print(httpResponse);

  lcd.clear();
  if ( noWifi == true ) {
    lcd.setCursor(0,0);
    lcd.print("smartDTsensor noWiFi");
  } else {
    lcd.setCursor(0,0);
    lcd.print("smartDTsensor  by JL");
  }
      
  lcd.setCursor(0,2);
  lcd.print("Temp:");
  lcd.setCursor(0,3);
  lcd.print("rF:");
  lcd.setCursor(0,1);
  lcd.print("CO2:");
  lcd.setCursor(19,2);
  lcd.print("C");
  lcd.setCursor(19,3);
  lcd.print("%");
  lcd.setCursor(17,1);
  lcd.print("ppm");

  buildPubStringString("DisplayBacklight", "true");
  client.publish("telemetry", jsonString,false);
}

//######################################################################
// LOOP ################################################################
//######################################################################
void loop() 
{ 

  while (!client.connected()) {
    Serial.println("Connecting to MQTT...");
     if (client.connect(clientId, mqttUser, mqttPassword)) {
      Serial.println("connected");
      client.subscribe("command/+/+/req/#");  
    } else {
      Serial.print("failed with state ");
      Serial.print(client.state());
      Mtemp = bme280.readTempC() - 2;
      Mhum = bme280.readHumidity() + 10;
      Mpress = bme280.readPressure();
      RAWppm = leseCO2();
      lcd.setCursor(10,2);
      lcd.print("      ");
      lcd.setCursor(10,2);
      lcd.print(Mtemp);
      lcd.setCursor(10,3);
      lcd.print("      ");
      lcd.setCursor(10,3);
      lcd.print(Mhum);
      lcd.setCursor(7,1);
      lcd.print("        ");
      lcd.setCursor(10,1);
      lcd.print(RAWppm);
      delay(2000);
    }
  }

  client.loop();

  //######################################################################
  // REFRESH SENSORDATA ##################################################
  //###################################################################### 

if (counter > 5000)
{
    Mtemp = bme280.readTempC() - 2;
    Mhum = bme280.readHumidity() + 10;
    Mpress = bme280.readPressure();
    RAWppm = leseCO2();
   
  //######################################################################
  // PUBLISH JSON SENSORDATA TO HONO #####################################
  //######################################################################     

    buildPubString("Temperature", Mtemp);
    client.publish("telemetry", jsonString,false);
    buildPubString("Humidity", Mhum);
    client.publish("telemetry", jsonString,false);
    buildPubString("Pressure", Mpress);
    client.publish("telemetry", jsonString,false);
    buildPubString("CO2", RAWppm);
    client.publish("telemetry", jsonString,false);

  //######################################################################
  // LCD ADJUSTMENTS #####################################################
  //######################################################################

    lcd.setCursor(10,2);
    lcd.print("      ");
    lcd.setCursor(10,2);
    lcd.print(Mtemp);
    lcd.setCursor(10,3);
    lcd.print("      ");
    lcd.setCursor(10,3);
    lcd.print(Mhum);
    lcd.setCursor(7,1);
    lcd.print("        ");
    lcd.setCursor(10,1);
    lcd.print(RAWppm);
    counter = 0;
} else 
{
  counter++;
}
  delay(1);  
}

